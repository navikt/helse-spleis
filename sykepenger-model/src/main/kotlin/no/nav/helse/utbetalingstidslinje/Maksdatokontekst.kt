package no.nav.helse.utbetalingstidslinje

import java.time.DayOfWeek.MONDAY
import java.time.DayOfWeek.SATURDAY
import java.time.DayOfWeek.SUNDAY
import java.time.LocalDate
import no.nav.helse.hendelser.Periode
import no.nav.helse.hendelser.Periode.Companion.grupperSammenhengendePerioder
import no.nav.helse.plus
import no.nav.helse.ukedager

internal data class Maksdatokontekst(
    // dato for vurderingene
    val vurdertTilOgMed: LocalDate,
    val startdatoSykepengerettighet: LocalDate,
    val startdatoTre친rsvindu: LocalDate,
    val betalteDager: Set<LocalDate>,
    val oppholdsdager: Set<LocalDate>,
    val avsl친tteDager: Set<LocalDate>,
    val begrunnelser: Map<LocalDate, Begrunnelse>
) {
    companion object {
        val TomKontekst = Maksdatokontekst(LocalDate.MIN, LocalDate.MIN, LocalDate.MIN, emptySet(), emptySet(), emptySet(), emptyMap())
    }

    internal val oppholdsteller = oppholdsdager.size
    internal val forbrukteDager = betalteDager.size
    internal fun erDagerUnder67칀rForbrukte(regler: ArbeidsgiverRegler) =
            gjenst친endeDagerUnder67칀r(regler) == 0

    internal fun erDagerOver67칀rForbrukte(sekstisyv친rsdagen: LocalDate, regler: ArbeidsgiverRegler) =
        gjenst친endeDagerOver67칀r(sekstisyv친rsdagen, regler) == 0

    internal fun gjenst친endeDagerUnder67칀r(regler: ArbeidsgiverRegler) = regler.maksSykepengedager() - forbrukteDager
    internal fun gjenst친endeDagerOver67칀r(sekstisyv친rsdagen: LocalDate, regler: ArbeidsgiverRegler): Int {
        val forbrukteDagerOver67 = betalteDager.count { it > sekstisyv친rsdagen }
        return regler.maksSykepengedagerOver67() - forbrukteDagerOver67
    }

    internal fun harN친ddMaks(vedtaksperiode: Periode) =
        avsl친tteDager.any { it in vedtaksperiode }

    internal fun datoForTilstrekkeligOppholdOppn친dd(tilstrekkeligOpphold: Int) =
        oppholdsdager.sorted().getOrNull(tilstrekkeligOpphold - 1)

    internal fun fremdelesSykEtterTilstrekkeligOpphold(vedtaksperiode: Periode, tilstrekkeligOpphold: Int): Boolean {
        val datoForTilstrekkeligOpphold = datoForTilstrekkeligOppholdOppn친dd(tilstrekkeligOpphold) ?: return false
        return avsl친tteDager.any { it > datoForTilstrekkeligOpphold && it in vedtaksperiode }
    }

    internal fun avgrensTil(vurderingTilOgMed: LocalDate): Maksdatokontekst {
        /** etter at vi har telt ferdig s친 skal hver vedtaksperiode f친 et maksdatoresultat som tar utgangspunkt i
         *  siste dag i sin periode. enten s친 "spoler vi tilbake" saken, eller s친 vyer vi fremover.
         */
        if (vurdertTilOgMed == vurderingTilOgMed) return this // 游땗
        if (vurdertTilOgMed > vurderingTilOgMed) return spolTilbake(vurderingTilOgMed)
        return vyFremover(vurderingTilOgMed) // 游땚
    }

    private fun spolTilbake(vurderingTilOgMed: LocalDate) = copy(
        vurdertTilOgMed = vurderingTilOgMed,
        betalteDager = betalteDager.filter { it <= vurderingTilOgMed }.toSet(),
        oppholdsdager = oppholdsdager.filter { it <= vurderingTilOgMed }.toSet(),
        avsl친tteDager = avsl친tteDager.filter { it <= vurderingTilOgMed }.toSet(),
        begrunnelser = begrunnelser.filterKeys { it <= vurderingTilOgMed }
    )

    private fun vyFremover(vurderingTilOgMed: LocalDate) = copy(
        vurdertTilOgMed = vurderingTilOgMed
    )

    internal fun inkrementer(dato: LocalDate) = copy(
        vurdertTilOgMed = dato,
        betalteDager = betalteDager.plus(dato),
        oppholdsdager = emptySet()
    )

    // tilgir forbrukte dager som f칮lge av at tre친rsvinduet forskyves
    internal fun dekrementer(dato: LocalDate, nyStartdatoTre친rsvindu: LocalDate) = copy(
        vurdertTilOgMed = dato,
        startdatoTre친rsvindu = nyStartdatoTre친rsvindu,
        betalteDager = betalteDager.filter { it >= nyStartdatoTre친rsvindu }.toSet() + dato,
        oppholdsdager = emptySet()
    )

    internal fun medOppholdsdag(dato: LocalDate) = copy(
        vurdertTilOgMed = dato,
        oppholdsdager = oppholdsdager + dato
    )

    internal fun medAvsl친ttDag(dato: LocalDate, begrunnelse: Begrunnelse) = copy(
        vurdertTilOgMed = dato,
        avsl친tteDager = this.avsl친tteDager + dato,
        oppholdsdager = oppholdsdager + dato,
        begrunnelser = this.begrunnelser.plus(dato to begrunnelse)
    )

    internal fun beregnMaksdato(
        sekstisyv친rsdagen: LocalDate,
        sytti친rsdagen: LocalDate,
        d칮dsdato: LocalDate?,
        regler: ArbeidsgiverRegler
    ): Maksdatoresultat {
        fun LocalDate.forrigeVirkedagF칮r() = minusDays(
            when (dayOfWeek) {
                SUNDAY -> 2
                MONDAY -> 3
                else -> 1
            }
        )

        fun LocalDate.sisteVirkedagInklusiv() = when (dayOfWeek) {
            SATURDAY -> minusDays(1)
            SUNDAY -> minusDays(2)
            else -> this
        }

        val harN친ddMaks = erDagerOver67칀rForbrukte(sekstisyv친rsdagen, regler) || erDagerUnder67칀rForbrukte(regler)
        val forrigeMaksdato = if (harN친ddMaks) betalteDager.last() else null
        val forrigeVirkedag = forrigeMaksdato ?: vurdertTilOgMed.sisteVirkedagInklusiv()

        val maksdatoOrdin칝rRett = forrigeVirkedag + gjenst친endeDagerUnder67칀r(regler).ukedager
        val maksdatoBegrensetRett = maxOf(forrigeVirkedag, sekstisyv친rsdagen.sisteVirkedagInklusiv()) + gjenst친endeDagerOver67칀r(sekstisyv친rsdagen, regler).ukedager

        val hjemmelsbegrunnelse: Maksdatoresultat.Bestemmelse
        val maksdato: LocalDate
        val gjenst친endeDager: Int
        // maksdato er den dagen som f칮rst inntreffer blant ordin칝r kvote, 67-친rs-kvoten og 70-친rsdagen,
        // med mindre man allerede har brukt opp alt tidligere
        when {
            maksdatoOrdin칝rRett <= maksdatoBegrensetRett -> {
                maksdato = listOfNotNull(maksdatoOrdin칝rRett, d칮dsdato).min()
                gjenst친endeDager = ukedager(forrigeVirkedag, maksdato)
                hjemmelsbegrunnelse = Maksdatoresultat.Bestemmelse.ORDIN칁R_RETT
            }

            maksdatoBegrensetRett <= sytti친rsdagen.forrigeVirkedagF칮r() -> {
                maksdato = listOfNotNull(maksdatoBegrensetRett, d칮dsdato).min()
                gjenst친endeDager = ukedager(forrigeVirkedag, maksdato)
                hjemmelsbegrunnelse = Maksdatoresultat.Bestemmelse.BEGRENSET_RETT
            }

            else -> {
                maksdato = sytti친rsdagen.forrigeVirkedagF칮r()
                gjenst친endeDager = ukedager(forrigeVirkedag, maksdato)
                hjemmelsbegrunnelse = Maksdatoresultat.Bestemmelse.SYTTI_칀R
            }
        }

        return Maksdatoresultat(
            vurdertTilOgMed = vurdertTilOgMed,
            bestemmelse = hjemmelsbegrunnelse,
            startdatoTre친rsvindu = startdatoTre친rsvindu,
            startdatoSykepengerettighet = startdatoSykepengerettighet.takeUnless { it == LocalDate.MIN },
            forbrukteDager = betalteDager.grupperSammenhengendePerioder(),
            oppholdsdager = oppholdsdager.grupperSammenhengendePerioder(),
            avsl친tteDager = avsl친tteDager.grupperSammenhengendePerioder(),
            maksdato = maksdato,
            gjenst친endeDager = gjenst친endeDager
        )
    }
}
