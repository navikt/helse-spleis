package no.nav.helse.spleis.e2e.inntektsmelding

import no.nav.helse.assertForventetFeil
import no.nav.helse.dsl.AbstractDslTest
import no.nav.helse.dsl.TestPerson.Companion.INNTEKT
import no.nav.helse.dsl.nyPeriode
import no.nav.helse.hendelser.S칮knad.S칮knadsperiode.Sykdom
import no.nav.helse.hendelser.til
import no.nav.helse.inspectors.inspekt칮r
import no.nav.helse.januar
import no.nav.helse.person.aktivitetslogg.Varselkode
import no.nav.helse.spleis.e2e.AktivitetsloggFilter.Companion.filter
import no.nav.helse.sykdomstidslinje.Dag
import no.nav.helse.칮konomi.Prosentdel.Companion.prosent
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test

internal class BegrunnelseForReduksjonEllerIkkeUtbetaltTest : AbstractDslTest() {

    @Test
    fun `arbeidsgiverperioden strekker seg over to perioder og inntektsmelding kommer etter s칮knadene`() {
        a1 {
            h친ndterS칮knad(Sykdom(1.januar, 10.januar, 100.prosent))
            h친ndterS칮knad(Sykdom(11.januar, 17.januar, 100.prosent))
            assertEquals("SSSSSHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            h친ndterInntektsmelding(listOf(1.januar til 16.januar), beregnetInntekt = INNTEKT, begrunnelseForReduksjonEllerIkkeUtbetalt = "ManglerOpptjening")
            assertEquals("NNNNNHH NNNNNHH NNS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
        }
    }

    @Test
    fun `arbeidsgiverperioden strekker seg over to perioder og inntektsmelding kommer f칮r siste s칮knad`() {
        a1 {
            h친ndterS칮knad(Sykdom(1.januar, 10.januar, 100.prosent))
            assertEquals("SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            h친ndterInntektsmelding(listOf(1.januar til 16.januar), beregnetInntekt = INNTEKT, begrunnelseForReduksjonEllerIkkeUtbetalt = "ManglerOpptjening")
            assertEquals("NNNNNHH NNN", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            h친ndterS칮knad(Sykdom(11.januar, 17.januar, 100.prosent))
            assertForventetFeil(
                forklaring = "N친r IM skal lage SykNav-dager kommer f칮r vi har mottatt s칮knad blir det ikke lagt inn som SykNav n친r s칮knaden kommer",
                n친 = {
                    assertEquals("NNNNNHH NNNSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
                },
                칮nsket = {
                    assertEquals("NNNNNHH NNNNNHH NNS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
                }
            )
        }
    }

    @Test
    fun `en tolkning av Permisjon`() {
        h친ndterS칮knad(Sykdom(1.januar, 16.januar, 100.prosent))
        // Arbeidsgiver kommuniserer at bruker er permitert fra 11.januar og at de dekker AGP tom 10.januar 游뱂
        h친ndterInntektsmelding(listOf(1.januar til 10.januar), beregnetInntekt = INNTEKT, begrunnelseForReduksjonEllerIkkeUtbetalt = "Permisjon")
        assertForventetFeil(
            forklaring = "Nav skal dekke de resterende dagene av arbeidsgiverperioden som arbeidsgiver ikke opplyser om",
            n친 = {
                assertEquals("NNNNNHH NNNSSHH SS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            },
            칮nsket = {
                assertEquals("SSSSSHH SSSNNHH NN", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            }
        )
    }

    @Test
    fun `en tolkning av ArbeidOpphoert`() {
        h친ndterS칮knad(Sykdom(1.januar, 16.januar, 100.prosent))
        // Arbeidsgiver kommuniserer at arbeidet er opph칮rt fra 11.januar og at de dekker AGP tom 10.januar 游뱂
        h친ndterInntektsmelding(listOf(1.januar til 10.januar), beregnetInntekt = INNTEKT, begrunnelseForReduksjonEllerIkkeUtbetalt = "ArbeidOpphoert")
        assertForventetFeil(
            forklaring = "Nav skal dekke de resterende dagene av arbeidsgiverperioden som arbeidsgiver ikke opplyser om",
            n친 = {
                assertEquals("NNNNNHH NNNSSHH SS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            },
            칮nsket = {
                assertEquals("SSSSSHH SSSNNHH NN", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            }
        )
    }

    @Test
    fun `Vedtaksperiode blir strukket med UkjentDag`() {
        a1 {
            h친ndterS칮knad(Sykdom(1.januar, 16.januar, 100.prosent))
            h친ndterS칮knad(Sykdom(25.januar, 31.januar, 100.prosent))
            h친ndterInntektsmelding(listOf(1.januar til 16.januar), f칮rsteFrav칝rsdag = 25.januar, begrunnelseForReduksjonEllerIkkeUtbetalt = "IkkeFullStillingsandel")

            assertTrue(inspekt칮r.sykdomstidslinje[25.januar] is Dag.SykedagNav)
            assertEquals(25.januar, inspekt칮r.vedtaksperioder(2.vedtaksperiode).inspekt칮r.behandlinger.last().endringer.last().sykdomstidslinje.inspekt칮r.f칮rsteIkkeUkjenteDag)

            assertForventetFeil(
                forklaring = "Vedtaksperiode blir strukket med UkjentDag",
                n친 = {
                    (17.januar til 31.januar).let { periode ->
                        assertEquals(periode, inspekt칮r.periode(2.vedtaksperiode))
                        assertEquals(periode, inspekt칮r.vedtaksperioder(2.vedtaksperiode).inspekt칮r.behandlinger.last().endringer.last().sykdomstidslinje.periode())

                    }
                },
                칮nsket = {
                    (25.januar til 31.januar).let { periode ->
                        assertEquals(periode, inspekt칮r.periode(2.vedtaksperiode))
                        assertEquals(periode, inspekt칮r.vedtaksperioder(2.vedtaksperiode).inspekt칮r.behandlinger.last().endringer.last().sykdomstidslinje.periode())

                    }
                }
            )
        }
    }

    @Test
    fun `Varsel havner p친 feil periode n친r f칮rste frav칝rsdag er i forlengelsen`() {
        a1 {
            nyPeriode(1.januar til 17.januar)
            nyPeriode(18.januar til 31.januar)
            h친ndterInntektsmelding(emptyList(), begrunnelseForReduksjonEllerIkkeUtbetalt = "ManglerOpptjening", f칮rsteFrav칝rsdag = 19.januar)
            h친ndterVilk친rsgrunnlag(1.vedtaksperiode)
            h친ndterYtelser(1.vedtaksperiode)
            h친ndterSimulering(1.vedtaksperiode)
            h친ndterUtbetalingsgodkjenning(1.vedtaksperiode)
            h친ndterUtbetalt()
            h친ndterYtelser(2.vedtaksperiode)
            h친ndterSimulering(2.vedtaksperiode)
            h친ndterUtbetalingsgodkjenning(2.vedtaksperiode)
            h친ndterUtbetalt()
            assertEquals("SSSSSHH SSSSSHH SSSSNHH SSSSSHH SSS", inspekt칮r.sykdomshistorikk.sykdomstidslinje().toShortString())
            assertForventetFeil(
                forklaring = "N친r arbeidsgiver oppgir f칮rste frav칝rsdag ut i forlengelsen havner varselet om uenighet i " +
                    "AGP p친 siste periode. Da utbetaler vi potensielt f칮rste periode feil og automatisk.",
                n친 = {
                    assertVarsel(Varselkode.RV_IM_3, 2.vedtaksperiode.filter())
                },
                칮nsket = {
                    assertVarsel(Varselkode.RV_IM_3, 1.vedtaksperiode.filter())
                }
            )
        }
    }
}
